package main

import (
	"context"
	"fmt"
	"os"
	"time"

	norm "github.com/kintsdev/norm"
)

// UUIDItem demonstrates a uuid primary key stored in PostgreSQL
type UUIDItem struct {
	ID        string    `db:"id" norm:"primary_key,type:uuid,default:gen_random_uuid()"`
	Name      string    `db:"name"`
	CreatedAt time.Time `db:"created_at" norm:"not_null,default:now()"`
}

func getenvDefault(k, def string) string {
	v := os.Getenv(k)
	if v == "" {
		return def
	}
	return v
}

func main() {
	host := getenvDefault("PGHOST", "127.0.0.1")
	port := getenvDefault("PGPORT", "5432")
	user := getenvDefault("PGUSER", "postgres")
	pass := getenvDefault("PGPASSWORD", "postgres")
	db := getenvDefault("PGDATABASE", "postgres")

	dsn := fmt.Sprintf("host=%s port=%s dbname=%s user=%s password=%s sslmode=disable", host, port, db, user, pass)
	kn, err := norm.NewWithConnString(dsn)
	if err != nil {
		panic(err)
	}
	defer func() { _ = kn.Close() }()

	// Auto-migrate the UUIDItem model
	if err := kn.AutoMigrate(&UUIDItem{}); err != nil {
		panic(err)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Insert using builder; id will be generated by gen_random_uuid()
	var ret []map[string]any
	_, err = kn.Model(UUIDItem{}).
		Insert("name").
		Values("example-uuid").
		Returning("id", "name").
		ExecInsert(ctx, &ret)
	if err != nil {
		panic(err)
	}
	fmt.Printf("Inserted row: id=%v name=%v\n", ret[0]["id"], ret[0]["name"])

	// Read back into struct and print canonical UUID string
	var items []UUIDItem
	if err := kn.Model(&UUIDItem{}).Find(ctx, &items); err != nil {
		panic(err)
	}
	for _, it := range items {
		fmt.Printf("Scanned item: id=%s name=%s created_at=%s\n", it.ID, it.Name, it.CreatedAt.Format(time.RFC3339))
	}
}
